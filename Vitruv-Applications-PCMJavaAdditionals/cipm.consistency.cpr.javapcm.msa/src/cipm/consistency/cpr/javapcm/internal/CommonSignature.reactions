import static tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper.*
import static extension edu.kit.ipd.sdq.commons.util.org.palladiosimulator.pcm.repository.ParameterUtil.*
import static extension tools.vitruv.applications.util.temporary.java.JavaMemberAndParameterUtil.hasSameSignature
import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.*
import tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper
import org.emftext.language.java.parameters.OrdinaryParameter
import org.emftext.language.java.members.Method
import org.emftext.language.java.modifiers.Abstract

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: commonSignature
in reaction to changes in java
execute actions in pcm


import commonDataType

routine createOrFindPCMSignature(java::Method interfaceMethod) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to interfaceMethod.containingConcreteClassifier
		require absence of pcm::OperationSignature corresponding to interfaceMethod
	}
	action {
		call {
			createPCMSignature(interfaceMethod)
		}
	}
}

routine createPCMSignature(java::Method interfaceMethod) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to interfaceMethod.containingConcreteClassifier
		require absence of pcm::OperationSignature corresponding to interfaceMethod
	}
	action {
		val operationSignature = create pcm::OperationSignature and initialize {
			operationSignature.entityName = interfaceMethod.name
			operationSignature.interface__OperationSignature = pcmInterface
		}
		
		update pcmInterface {
			pcmInterface.signatures__OperationInterface += operationSignature
		}
		
		call {
			addCorrespondenceBetweenMethodAndOperationSignature(interfaceMethod, operationSignature)
		}
	}
}

routine addCorrespondenceBetweenMethodAndOperationSignature(java::Method method, pcm::OperationSignature sign) {
	action {
		add correspondence between sign and method
	}
}

routine checkMembersForOperations(java::ConcreteClassifier classifier) {
	match {
		retrieve pcm::OperationInterface corresponding to classifier
	}
	action {
		call {
			for (mem : classifier.members) {
				if (mem instanceof Method) {
					if (mem.public) {
						createOrFindPCMSignature(mem)
					}
				}
			}
		}
	}
}

routine createSeffFromClassInterface(java::ClassMethod method, java::Class javaClass) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to javaClass
		require absence of pcm::ResourceDemandingSEFF corresponding to method
	}
	action {
		call {
			if (method.public && method.modifiers.filter(Abstract).size === 0) {
				createSEFF(method, javaClass, method)
			}
		}
	}
}

routine createSeffFromImplementingInterfaces(java::ClassMethod classMethod, java::Class javaClass) {
	match {
		require absence of pcm::ResourceDemandingSEFF corresponding to classMethod
	}
	action {
		call {
			if (classMethod.modifiers.filter(Abstract).size !== 0) {
				return;
			}
			val implementingInterfaces = findImplementingInterfacesFromTypeRefs(javaClass.implements)
			for (implementingInterface : implementingInterfaces) {
				createSeffFromImplementingInterface(classMethod, javaClass, implementingInterface)
			}
		}
	}
}

routine createSeffFromImplementingInterface(java::ClassMethod classMethod, java::Class javaClass, java::Interface javaInterface) {
	match {
		val operationInterface = retrieve pcm::OperationInterface corresponding to javaInterface
	} 
	action {
		call {
			val methods = javaInterface.methods.filter[hasSameSignature(classMethod)]
			for (method : methods) {
				createSEFF(method, javaClass, classMethod)
			}
		}
	}
}

routine createSEFF(java::Method javaMethod, java::Class javaClass, java::ClassMethod classMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
	}
	action {
		val rdseff = create pcm::ResourceDemandingSEFF and initialize {
			rdseff.describedService__SEFF = operationSignature
			rdseff.basicComponent_ServiceEffectSpecification = basicComponent
		}
		add correspondence between classMethod and rdseff
		
		update basicComponent {
			basicComponent.serviceEffectSpecifications__BasicComponent += rdseff
		}
	}
}

routine createParameter(java::OrdinaryParameter javaParameter, java::Parametrizable javaMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
	}
	action {
		call {
			checkCollectionDataTypeCreation(javaParameter.typeReference)
		}
		val pcmParameter = create pcm::Parameter and initialize {
			pcmParameter.operationSignature__Parameter = operationSignature
			pcmParameter.dataType__Parameter = TypeReferenceCorrespondenceHelper.
				getDataTypeFromTypeReference(javaParameter.typeReference, correspondenceModel,
				userInteractor, operationSignature.interface__OperationSignature.repository__Interface)
			pcmParameter.name = javaParameter.name
		}
		add correspondence between javaParameter and pcmParameter
		update operationSignature {
			operationSignature.parameters__OperationSignature += pcmParameter
		}
		call {
			checkInnerDeclarationsCreation(pcmParameter.dataType__Parameter, javaParameter.typeReference)
		}
	}
}

routine changeParameterName(String newName, java::Parameter javaParameter) {
	match {
		val pcmParameter = retrieve pcm::Parameter corresponding to javaParameter
	}
	action {
		update pcmParameter {
			pcmParameter.name = newName
		}
	}
}

routine updateReturnType(java::Method javaMethod, java::TypeReference typeReference) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
	}
	action {
		update operationSignature {
			val repository = operationSignature.interface__OperationSignature.repository__Interface
			operationSignature.returnType__OperationSignature = getCorrespondingPCMDataTypeForTypeReference(
				typeReference, correspondenceModel, userInteractor,
				repository, javaMethod.typeReference.arrayDimension)
		}
	}
}

routine checkRemovalOfOperationSignature(java::Method interfaceMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to interfaceMethod
	}
	action {
		call {
			for (param : interfaceMethod.parameters) {
				if (param instanceof OrdinaryParameter) {
					deleteParameter(param)
				}
			}
		}
		// Should the corresponding SEFFs still exist?
		// Should the references to the removed OperationSignature in all rdseff.describedService__SEFF also be removed?
		delete operationSignature
	}
}

routine checkRemovalOfSEFF(java::ClassMethod classMethod) {
	match {
		val seff = retrieve pcm::ResourceDemandingSEFF corresponding to classMethod
	}
	action {
		delete seff
	}
}

routine deleteParameter(java::OrdinaryParameter javaParameter) {
	match {
		val pcmParameter = retrieve pcm::Parameter corresponding to javaParameter
	}
	action {
		remove correspondence between javaParameter and pcmParameter
		delete pcmParameter
	}
}
