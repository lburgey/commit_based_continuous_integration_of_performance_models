import org.palladiosimulator.pcm.repository.RepositoryPackage
import cipm.consistency.cpr.javapcm.internal.InternalUtils

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: component
in reaction to changes in java
execute actions in pcm


routine createOrFindArchitecturalElement(java::ConcreteClassifier classifier) {
	match {
		require absence of pcm::RepositoryComponent corresponding to classifier
	}
	action {
		call {
			val module = InternalUtils.getModule(classifier)
			if (module === null) {
				return
			}
			createOrFindArchitecturalElementBasedOnModule(classifier, module)
		}
	}
}

routine createOrFindArchitecturalElementBasedOnModule(java::ConcreteClassifier classifier, java::Module module) {
	match {
		val pcmComponent = retrieve optional pcm::RepositoryComponent corresponding to module
	}
	action {
		call {
			if (!pcmComponent.isPresent) {
				createBasicComponent(module)
			}
			addCorrespondenceForPcmComponentAndClassifierBasedOnModule(classifier, module)
		}
	}
}

routine createBasicComponent(java::Module module) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to RepositoryPackage.Literals.REPOSITORY
	}
	action {
		val pcmBasicComponent = create pcm::BasicComponent and initialize {
			pcmBasicComponent.entityName = module.name
		}
		update pcmRepository {
			pcmRepository.components__Repository += pcmBasicComponent
		}
		add correspondence between pcmBasicComponent and module
	}
}

routine addCorrespondenceForPcmComponentAndClassifierBasedOnModule(java::ConcreteClassifier classifier, java::Module module) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to module
	}
	action {
		add correspondence between pcmComponent and classifier
	}
}

routine checkBasicComponentRemovalForClassifier(java::ConcreteClassifier clazz) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to clazz
		val otherClassifiers = retrieve many java::ConcreteClassifier corresponding to pcmComponent
	}
	action {
		remove correspondence between clazz and pcmComponent
		call {
			if (otherClassifiers.size == 1) {
				removeComponent(pcmComponent)
			}
		}
	}
}

routine checkBasicComponentRemovalForModule(java::Module mod) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to mod
	}
	action {
		call {
			removeComponent(pcmComponent)
		}
	}
}

routine removeComponent(pcm::RepositoryComponent com) {
	action {
		delete com
	}
}
