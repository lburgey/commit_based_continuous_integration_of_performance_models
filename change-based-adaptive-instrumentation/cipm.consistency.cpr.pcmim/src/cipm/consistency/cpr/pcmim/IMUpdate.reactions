import cipm.consistency.base.models.instrumentation.InstrumentationModel.InstrumentationModelPackage
import org.palladiosimulator.pcm.seff.LoopAction
import org.palladiosimulator.pcm.seff.InternalCallAction
import org.palladiosimulator.pcm.seff.BranchAction
import org.palladiosimulator.pcm.seff.ExternalCallAction
import org.palladiosimulator.pcm.seff.InternalAction
import cipm.consistency.base.models.instrumentation.InstrumentationModel.InstrumentationType
import cipm.consistency.cpr.pcmim.InternalUtils

import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm
import "http://www.dmodel.com/InstrumentationMetamodel" as im


reactions: imUpdate
in reaction to changes in pcm
execute actions in im




reaction AddedSEFF {
	after element pcm::ResourceDemandingSEFF inserted in pcm::BasicComponent[serviceEffectSpecifications__BasicComponent]
	call {
		createOrFindServiceInstrumentationPoint(newValue)
	}
}

routine createOrFindServiceInstrumentationPoint(pcm::ResourceDemandingSEFF seff) {
	match  {
		require absence of im::ServiceInstrumentationPoint corresponding to seff
		val insModel = retrieve im::InstrumentationModel
			corresponding to InstrumentationModelPackage.Literals.INSTRUMENTATION_MODEL
	} 
	create {
		val sip = new im::ServiceInstrumentationPoint
	}
//	action {
//		val sip = create im::ServiceInstrumentationPoint and initialize {
	update {
		sip.active = true
		sip.service = seff
		insModel.points += sip
		sip.addCorrespondenceBetween(seff)
	}
}

reaction AddedAction {
	after element pcm::AbstractAction inserted in pcm::ResourceDemandingBehaviour[steps_Behaviour]
	call {
		var actionType = InstrumentationType.INTERNAL_VALUE
		if (newValue instanceof LoopAction) {
			actionType = InstrumentationType.LOOP_VALUE
		} else if (newValue instanceof BranchAction) {
			actionType = InstrumentationType.BRANCH_VALUE
		} else if (newValue instanceof InternalAction) {
			actionType = InstrumentationType.INTERNAL_VALUE
		} else if (newValue instanceof InternalCallAction) {
			actionType = InstrumentationType.INTERNAL_CALL_VALUE
		} else if (newValue instanceof ExternalCallAction) {
			actionType = InstrumentationType.EXTERNAL_CALL_VALUE
		} else {
			actionType = -1
		}
		if (actionType !== -1) {
			var seff = InternalUtils.getParentSEFFNotForInternalBehaviour(affectedEObject)
			if (seff !== null) {
				createOrFindActionInstrumentationPoint(seff, newValue, actionType)
			}
		}
	}
}

routine createOrFindActionInstrumentationPoint(pcm::ResourceDemandingSEFF seff,
	pcm::AbstractAction absAction, Integer typeValue) {
	match {
		require absence of im::ActionInstrumentationPoint corresponding to absAction
		val sip = retrieve im::ServiceInstrumentationPoint corresponding to seff
	}
	create {
		val aip = new im::ActionInstrumentationPoint
	}
	update {
//		val aip = create im::ActionInstrumentationPoint and initialize {
			aip.active = true
			aip.^action = absAction
			aip.type = InstrumentationType.get(typeValue)
//		}
//		update sip {
			sip.actionInstrumentationPoints += aip
//		}
//		add correspondence between aip and absAction
		addCorrespondenceBetween(aip, absAction)
	}
}

reaction RemovedSEFF {
	after element pcm::ResourceDemandingSEFF removed from pcm::BasicComponent[serviceEffectSpecifications__BasicComponent]
	call {
		checkRemovalOfServiceInstrumentationPoint(oldValue)
	}
}

routine checkRemovalOfServiceInstrumentationPoint(pcm::ResourceDemandingSEFF seff) {
	match {
		val im = retrieve im::InstrumentationModel
			corresponding to InstrumentationModelPackage.Literals.INSTRUMENTATION_MODEL
	}
//	action {
		update {
			val sips = im.points.filter[it.service === null || it.service.eIsProxy].toSet
			if (sips !== null && !sips.empty) {
				for (si : sips) {
					si.removeObject
//					removeServiceInstrumentationPoint(si)
				}
			}
			checkRemovalOfNonProxyServiceInstrumentationPoint(seff)
		}
//	}
}

routine checkRemovalOfNonProxyServiceInstrumentationPoint(pcm::ResourceDemandingSEFF seff) {
	match {
		val sip = retrieve im::ServiceInstrumentationPoint corresponding to seff
	}
	update sip.removeObject
//	{
//		removeServiceInstrumentationPoint(sip)
//	}
}

//routine removeServiceInstrumentationPoint(im::ServiceInstrumentationPoint sip) {
////	action {
////		delete sip
////
////	}
//	update sip.removeObject
//}

reaction RemovedAbstractAction {
	after element pcm::AbstractAction removed from pcm::ResourceDemandingBehaviour[steps_Behaviour]
	call {
		var seff = InternalUtils.getParentSEFFNotForInternalBehaviour(affectedEObject)
		if (seff !== null) {
			checkRemovalOfActionInstrumentationPoint(oldValue, seff)
		}
	}
}

routine checkRemovalOfActionInstrumentationPoint(pcm::AbstractAction absAction, pcm::ResourceDemandingSEFF seff) {
	match {
		val sip = retrieve im::ServiceInstrumentationPoint corresponding to seff
	}
//	action {
		update {
			val aips = sip.actionInstrumentationPoints.filter[it.^action === null || it.^action.eIsProxy].toSet
			if (aips !== null && !aips.empty) {
				for (ai : aips) {
					ai.removeObject
//					removeActionInstrumentationPoint(ai)
				}
			}
			checkRemovalOfNonProxyActionInstrumentationPoint(absAction)
		}
//	}
}

routine checkRemovalOfNonProxyActionInstrumentationPoint(pcm::AbstractAction absAction) {
	match {
		val aip = retrieve im::ActionInstrumentationPoint corresponding to absAction
	}
//	action {
//		call {
//			removeActionInstrumentationPoint(aip)
//		}
//	}
	update aip.removeObject
}